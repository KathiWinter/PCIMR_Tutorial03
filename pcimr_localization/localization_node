#!/usr/bin/env python3

import rospy
import numpy as np
import time
from std_msgs.msg import String
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import OccupancyGrid, MapMetaData
from geometry_msgs.msg import Point
from visualization_msgs.msg import Marker


class LocalizationNode():

    def __init__(self):

        self.move = None
        self.scan = None
        self.grid = None
        self.msg_map = None


        # Initialize Subscribers
        self.sub_move = rospy.Subscriber('/move', String, self.callback_move)
        self.sub_scan = rospy.Subscriber('/scan', LaserScan, self.callback_scan)
        self.sub_map = rospy.Subscriber('/map', OccupancyGrid, self.callback_grid)

        # Initialize Publishers
        self.pub_pos = rospy.Publisher("/robot_pos", Point, queue_size=10)
        self.pub_marker = rospy.Publisher("/visualization/robot_pos", Marker, queue_size=10)
        self.pub_grid = rospy.Publisher("/robot_pos_map", OccupancyGrid, queue_size=10)


        self.belief = []
        self.max_point = (2,2)

    def callback_move(self, param_move):
        self.move
        self.move = param_move
        
    def callback_scan(self, param_scan):
        self.scan = param_scan

    def callback_grid(self, param_grid):
        self.grid = param_grid

        msg_map = OccupancyGrid()
        msg_map.header.frame_id =self.grid.header.frame_id
        msg_map.header.seq =self.grid.header.seq
        msg_map.info.map_load_time = rospy.Time.now()
        msg_map.info.resolution =self.grid.info.resolution
        msg_map.info.height =self.grid.info.height
        msg_map.info.width =self.grid.info.width

        self.bayes_filter(self.grid)

    def bayes_filter(self,grid):
   
        probabilities = self.belief
        
        #Initialize first probability array
        if(len(self.belief) == 0):
            #Count accessible y*l+xs 
            fields = 0
            for field in enumerate(self.grid.data):
                if field[1] == 0:
                    fields += 1

        
            #Probability of being kidnapped randomly to one field, for each field
            self.ptx = 1/fields

            probabilities = np.transpose(np.asarray(self.grid.data, dtype=np.float).reshape(self.grid.info.width,self.grid.info.height))
            
            for x, row in enumerate(probabilities):
                for y, _ in enumerate(row):
                    l = len(row)
                    if grid.data[y*l+x]!= 0: 
                        probabilities[x][y] = 0
                    else: 
                        probabilities[x][y] = self.ptx

        sum_p = 0
        
        for x, row in enumerate(probabilities):
            for y, _ in enumerate(row):


                #Incoporate theself.move-model
                l = len(row)
                self.move_uncertainty = np.array([0.9,0.04,0.04,0.0,0.02])
                if(self.move != None):
                    self.ptx_1 = 0
                    self.ptx_2 = 0
                    self.ptx_3 = 0
                    self.ptx_4 = 0
                    if(grid.data[y*l+x] != 0):
                        probabilities[x][y] = 0.0
                    elif(self.move.data == "N"):
                        if(y-1 > 0):
                            self.ptx_1 = probabilities[x][y-1]
                        if(x+1 < 20):
                            self.ptx_2 = probabilities[x+1][y]
                        if(x-1 > 0):
                            self.ptx_3 = probabilities[x-1][y]
                        if(y+1 < 20):
                            self.ptx_4 = probabilities[x][y+1]
                    elif(self.move.data == "S"):
                        if(y+1 < 20):
                            self.ptx_1 = probabilities[x][y+1]
                        if(x-1 > 0):
                            self.ptx_2 = probabilities[x-1][y] 
                        if(x+1 < 20):
                            self.ptx_3 = probabilities[x+1][y]
                        if(y-1 > 0):
                            self.ptx_4 = probabilities[x][y-1]
                    elif(self.move.data == "E"):
                        if(x-1 > 0):
                            self.ptx_1 = probabilities[x-1][y]
                        if(y-1 > 0):
                            self.ptx_2 = probabilities[x][y-1]
                        if(y+1 < 20):
                            self.ptx_3 = probabilities[x][y+1]
                        if(x+1 < 20):
                            self.ptx_4 = probabilities[x+1][y]
                    elif(self.move.data == "W"):
                        if(x+1 < 20):
                            self.ptx_1 = probabilities[x+1][y]
                        if(y+1 < 20):
                            self.ptx_2 = probabilities[x][y+1]
                        if(y-1 > 0):
                            self.ptx_3 = probabilities[x][y-1]
                        if(x-1 > 0):
                            self.ptx_4 = probabilities[x-1][y]
                    else:
                        print("error receiving directions")

                    p_bel1 = np.dot(self.move_uncertainty, [self.ptx_1, self.ptx_2, self.ptx_3, self.ptx_4, probabilities[x][y]])
                   
                else: 
                    p_bel1 = probabilities[x][y]
         
                #Incoroporate sensor model
                #[2.0, 2.0, 10.0, 2.0] S, W, N, E                                             
                if(self.scan == None):
                    pass
                elif(grid.data[y*l+x] != 0):
                    probabilities[x][y] = 0.0
                else:
                    n = 0.0
                    s = 0.0
                    w = 0.0
                    #e = 0.0

                    #South Sensor
                    if(y*l+x-l*int(self.scan.ranges[0]) >= 0):
                        if(self.grid.data[y*l+x-l*int(self.scan.ranges[0])] ==  100):
                            s = 0.8
                        elif(y*l+x-l*int(self.scan.ranges[0]+1) >= 0):
                            if(self.grid.data[y*l+x-l*int(self.scan.ranges[0]+1)] == 100 or self.grid.data[y*l+x-l*int(self.scan.ranges[0]-1)] == 100):
                                s = 0.1
                        else: 
                            s = 0.0
               
                    #West Sensor
                    if(y*l+x-1*int(self.scan.ranges[1])>=0):  
                        flag = 0
                        for z in range(int(self.scan.ranges[1])):
                            if(self.grid.data[y*l+x-1*z] != 0):
                                flag = 1
                        if(flag == 0 and y*l+x-1*int(self.scan.ranges[1]) == (y-1)*l+19):
                            w = 0.8
                        elif(flag == 0 and y*l+x-1*int(self.scan.ranges[3]+1) == (y+1)*l or flag == 0 and y*l+x-1*int(self.scan.ranges[3]-1) == (y+1)*l):
                            w = 0.1
                        elif(flag == 1): 
                            w = 0.0
                        elif(self.grid.data[y*l+x-1*int(self.scan.ranges[1])] == 100):  
            
                            w = 0.8
                        elif(y*l+x-1*int(self.scan.ranges[1]+1)>=0):  
                            if(self.grid.data[y*l+x-1*int(self.scan.ranges[1]+1)] == 100 or self.grid.data[y*l+x-1*int(self.scan.ranges[1]-1)] == 100):
                                w = 0.1

                    #North Sensor
                    if(y*l+x+l*int(self.scan.ranges[2])<len(self.grid.data)):
                        if(self.grid.data[y*l+x+l*int(self.scan.ranges[2])] == 100):
                            n = 0.8
                        elif(y*l+x+l*int(self.scan.ranges[2]+1)<len(self.grid.data)):
                            if(self.grid.data[y*l+x+l*int(self.scan.ranges[2]+1)] == 100 or self.grid.data[y*l+x+l*int(self.scan.ranges[2]-1)] == 100):
                                n = 0.1
                        else: 
                            n = 0.0
                    
                    
                    #East Sensor
                    '''if(y*l+x+1*int(self.scan.ranges[3]) < len(self.grid.data)):
                        flag = 0
                        for z in range(int(self.scan.ranges[3])):
                            if(self.grid.data[y*l+x+1*z] != 0):
                                flag = 1
                        if(flag == 0 and y*l+x+1*int(self.scan.ranges[3]) == (y+1)*l):
                            w = 0.8
                        elif(flag == 0 and y*l+x+1*int(self.scan.ranges[3]+1) == (y+1)*l or flag == 0 and y*l+x+1*int(self.scan.ranges[3]-1) == (y+1)*l):
                            w = 0.1
                        elif(flag == 1): 
                            w = 0.0
                        elif(self.grid.data[y*l+x+1*int(self.scan.ranges[3])] == 100):
                            e = 0.8
                        elif(y*l+x+1*int(self.scan.ranges[3]+1) < len(self.grid.data)):
                            if(self.grid.data[y*l+x+1*int(self.scan.ranges[3]+1)] == 100 or self.grid.data[y*l+x+1*int(self.scan.ranges[3]-1)] == 100):
                                e = 0.1
                        else: 
                            e = 0.0'''
              
       
                    if(n != 0.0 and s != 0.0  and w != 0.0):
                        p_bel2 = (n + s + w) * p_bel1 * 10
                    else: 
                        p_bel2 = 0.0
                
                    sum_p += p_bel2
    
                    probabilities[x][y] = p_bel2
                    #END FOR-LOOP
        
        
        if(sum_p != 0):
            n = 1 / sum_p
            for indexp, r in enumerate(probabilities):
                for indexx, p in enumerate(r):
                    probabilities[indexp][indexx] = p * n
                
        
        max = 0
        for indexi, i in enumerate(probabilities):
            for indexx, x in enumerate(i):
                if x > max:
                    max = x
                    self.max_point = (indexi, indexx)
        
 
        self.msg_map = self.numpy_to_occupancy_grid(probabilities)
        self.msg_map.info.resolution = 1.0
        
        self.belief = probabilities

    def numpy_to_occupancy_grid(self, arr, info=None):
        if not len(arr.shape) == 2:
            raise TypeError('Array must be 2D')

        # Adjust values
        arr = arr.astype('float64')
        factor = 100/np.max(arr)
        arr[arr > 0] *= factor

        arr = np.array(np.transpose(arr), dtype=np.int8)

        self.grid = OccupancyGrid()
        if isinstance(arr, np.ma.MaskedArray):
            # We assume that the masked value are already -1, for speed
            arr = arr.data
        self.grid.data = arr.ravel()
        self.grid.info = info or MapMetaData()
        self.grid.info.height = arr.shape[0]
        self.grid.info.width = arr.shape[1]

        return self.grid


    def run(self, rate: float = 1):
        """
        Periodically publishes the information from the simulator on the defined topics.

        @param rate: The rate at which the topics are published.
        """

        while not rospy.is_shutdown():

            # Publish messages
            if(self.msg_map != None):
                self.pub_grid.publish(self.msg_map)
                self.pub_pos.publish(Point(self.max_point[0], self.max_point[1], 0))


            if rate:
                rospy.sleep(1/rate)




if __name__ == "__main__":
    rospy.init_node('localization_node')

    localization_node = LocalizationNode()
    localization_node.run(rate=1)
